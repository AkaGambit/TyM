# The endpoints here get called when executing the specified command. For example the hook "test" would get executed when running the command /webapi notify test
command {
    # This is the name of the endpoint, which is used to call it via the webapi command. _EXAMPLE_
    test {
        # The aliases this command can be called with. THESE ARE NOT PREFIXED WITH "/webapi notify", BE CAREFUL NOT TO OVERRIDE OTHER COMMANDS! (unless you want to)
        aliases=[
            test
        ]
        # If set to false this disables the complete command hook and also doesn't register the command in the command registry
        enabled=false
        # The list of hooks that is called when this command is executed The same kind of hooks as in the events above can be used, with a few additions mentioned below
        hooks=[
            {
                address="http://127.0.0.1:25000"
                enabled=false
            }
        ]
        # Here you have to specify what parameters are used. These parameters must be included when running the command. So the example command below would have to be run using the following syntax: /webapi notfy test {player} {world} The body automatically contains all the parameters that are listed here. The parameters are expected to show up in this order when calling the command. There is a special parameter 'source' which is always included and contains the identifier of the one who ran the command (e.g. UUID of the player). Possible parameter types are: STRING, BOOL, INTEGER, DOUBLE, PLAYER, WORLD, LOCATION, VECTOR3D, VECTOR3I. Parameters can be marked as optional, and if set to true will be wrapped in an optional arguments.
        params=[
            {
                name="the_player"
                type=player
            },
            {
                name="the_world"
                optional=true
                type=world
            }
        ]
    }
}
# These hooks can be used to bind to custom events. You have to use the fully qualified class name as the key, and then a hook list just like for the event hooks above. These hooks work just like the event hooks, although the data depends on the event you subscribe to.
custom {
    # _EXAMPLE_
    "org.spongepowered.api.event.command.SendCommandEvent"=null
}
# The following are event hooks which are all called when the specified event happens. They get passed various data in the body (if method != GET, described below for each event). The format of the hooks is described in the "all" event hook. This format can be used anywhere marked with "HOOKS". Please note that the hooks don't get called in any particular order, and might even be called concurrently.
events {
    # This event is fired when a player earns an achievement
    achievement=null
    # This event is fired for all other events. The "X-WebAPI-Event" header specifies the exact event.
    all=[
        {
            # This is the address of the endpoint.
            address="http://127.0.0.1:25000"
            # Choose to either send the data as: JSON = application/json XML = application/xml
            dataType=JSON
            # Set to true to send detailed json data
            details=false
            # Set to true or omit to enable the endpoint.
            enabled=false
            # Filters are used to only send certain events to certain endpoints Use the 'name' property to select a filter and pass additional options in the 'config' property
            filter {
                config=[
                    "minecraft:stone_button",
                    "minecraft:wooden_button"
                ]
                name=WebAPI-BlockType
            }
            # Choose to send the data wrapped as application/x-www-form-urlencoded
            form=false
            # This is a list of additional headers that is sent to the server. You can use this to e.g. specify a secret key which ensures that the server knows the requests are coming from the Web-API. Please note that the following headers will always be overridden by the Web-API: X-WebAPI-Version, X-WebAPI-Event, X-WebAPI-Source, User-Agent, Content-Type, Content-Length, accept, charset
            headers=[
                {
                    name=X-WEBAPI-KEY
                    value=MY-SUPER-SECRET-KEY
                }
            ]
            # This is the http method that is used (GET, PUT, POST or DELETE)
            method=POST
            # Permissions node same as the ones in the permissions.conf file, use to configure which data is sent to this node
            permissions="*"
        }
    ]
    # This event is fired when a block update changes status NOTE: These are not actual minecraft blocks updating, these are the WebAPI block updates
    "block_update_status"=null
    # This event is fired when a chat message is sent on the server
    chat=null
    # This event is fired when a command is executed
    command=null
    # This event is fired when a player clicks one of the options of an interactive message
    "custom_message"=null
    # This event is fired when an explosion occurs
    explosion=null
    # This event is fired when a chunk is generated
    "generate_chunk"=null
    # This event is fired when a player interacts with a block
    "interact_block"=null
    # This event is fired when an inventory is closed
    "inventory_close"=null
    # This event is fired when an inventory is opened
    "inventory_open"=null
    # This event is fired when a player gets banned
    "player_ban"=null
    # This event is fired when a player dies
    "player_death"=null
    # This event is fired when a player joins the server
    "player_join"=null
    # This event is fired when a player gets kicked
    "player_kick"=null
    # This event is fired when a player leaves the server
    "player_leave"=null
    # This event is fired when the server starts
    "server_start"=null
    # This event is fired when the server stops
    "server_stop"=null
    # This event is fired when a world is loaded
    "world_load"=null
    # This event is fired when the world is saved
    "world_save"=null
    # This event is fired when a world is unloaded
    "world_unload"=null
}
# Config file version, used to update correctly
version=4
